---
title: "Bayesing-based popPK modeling of clonidine with informative priors"
author:
  - name: "Paweł Wiczling*"
    affiliations:
      - name: "Department of Biopharmaceutics and Pharmacodynamics, Medical University of Gdańsk, Gen. J. Hallera 107, 80-416 Gdańsk, Poland"
date: "`r format(Sys.Date())`"
format:
  html:
    theme: cosmo
    toc: true
    code-fold: true  
    code-tools: true
    fig-width: 7
    fig-height: 7
---

# Setup

The codes are based on STAN/Torsten manual <https://metrumresearchgroup.github.io/Torsten/>

The packages we will use are listed below.

```{r message=FALSE}
#' Instaling Stan and Torsten might be difficult. Follow this advice in case of any troubles:
#' https://discourse.mc-stan.org/t/installation-on-windows-revisited/20207
#' https://github.com/stan-dev/cmdstan/issues/909

library(cmdstanr)
set_cmdstan_path("C:/Users/pawel/Documents/.cmdstan/Torsten-master/Torsten-master/cmdstan")
library(ggplot2)
library(gridExtra)
library(rstan)
library("tidyr")
library("dplyr")
library("posterior")
# library(shinystan)

set.seed(10271998) ## not required but assures repeatable results
```

# Introduction

The aim of this case study was to develop a population pharmacokinetic model of clonidine using Bayesian methods and an open-source programming environment RStudio, the programming language Stan and a library of pharmacokinetic tools Torsten.

```{r, include=FALSE}
knitr::opts_chunk$set(cache=TRUE, message=FALSE, error=FALSE, warning=FALSE, comment=NA, out.width='95%')
```

# Data

The analyzed PK data was obtained from 17 children (Department of Pediatric Anesthesiology and Intensive Care in Poznan). The results presented in the publication by Potts et al. [1] were used as a prior information (a meta-analysis of five studies conducted in Sweden and New Zealand). The head of the analyzed data:

```{r include=TRUE}

xdata <- read.csv("../Data/data-clonidine.csv")
colnames(xdata)[1] <- "ID"

xdata$TINF <- xdata$TINF/60;
xdata$DV <- xdata$DV/1000;

xdata$MDV[107] <- 1;
xdata$EVID[107] <- 1;

xdata$outliers = xdata$DV>20;
xdata$infusion = xdata$TIMEh<xdata$TINF;

xdata$TIMEPOST = xdata$TIMEh-xdata$TINF;

head(xdata)
```

## Raw Data

First a simple graphical presentation of the data. Red plots denote outliers of unknown origin.

```{r include=TRUE}

plot1<-ggplot(data = subset(xdata, EVID == 0 & outliers==0 & infusion==1), aes(x = TIMEh, y = DV, group = ID)) + 
  geom_point() + 
  geom_line() + 
  geom_point(data = subset(xdata, EVID == 0 & outliers==1 & infusion==1), aes(x = TIMEh, y = DV, group = ID),colour = "red") + 
  scale_y_log10(limits = c(0.1, 250))+
  ylab("Clonindne, ng/ml") +
  xlab("Time after infutions start, h") + 
  theme(legend.position = "none")

## Some plotting
plot2<-ggplot(data = subset(xdata, EVID == 0 & outliers==0 & infusion==0), aes(x = TIMEPOST, y = DV, group = ID)) + 
  geom_point() + 
  geom_line() + 
  geom_point(data = subset(xdata, EVID == 0 & outliers==1 & infusion==0), aes(x = TIMEPOST, y = DV, group = ID),colour = "red") + 
  scale_y_log10(limits = c(0.1, 250))+
  ylab("Clonindne, ng/ml") +
  xlab("Time after infusion end, h")+
  theme(legend.position = "none") 

plot12 <-grid.arrange(plot1, plot2, ncol=2)

```

# Methods

## Model

The data was analyzed using a 2 comp. PK model [1].

$$
V_1 \cdot \frac{dC_1}{dt} = Input(t) - CL \cdot  C_1 - Q \cdot  C_1 + Q \cdot  C_2 \\
V_2 \cdot \frac{dC_2}{dt} =  Q \cdot  C1 - Q \cdot  C_2
$$

where $C_1$ and $C_2$ denote clonidine concentrations in plasma and peripheral compartment. $Input(t)$ denotes clonidine dosing specific for a patient. The statistical model has the following structure (hierarchical model):

$$ 
\log C_{Obs_{i,j}} \sim student_t(\nu_1,f_1(P_{i},t_{i,j}),\sigma_1) \\
\log P_{i} \sim \text{MVN}(\log \theta_P + logfr_P+ allo_P \cdot \log(BW_i/70) + maturation_i, \Omega) \\
maturation_i = log(1-(1-\beta)*exp(-(4*AGE_i)*0.693/Tcl)) \ for \ CL \ only
$$

where $P_i=(CL_{i}, Q_{i}, V1_{i}, V2_{i})$ is a vector of subject-specific parameters, $f_1(.)$ corresponds to the above ODE equations, $MVN$ is a multivariate normal distribution, $\theta_P$ is a vector of typical values of $P_i$, $allo_p$ is a vector of slopes between $P_i$ and $BW_i$. $maturation_i$ denotes a maturation function for CL. In turn, $\sigma$ is the scale and $\Omega$ is the scale matrix for the random effects related to the residual and unexplained between-subject variability. $fr_{P}$ is the difference between the literature and studied population. For convenience $\Omega$ was decomposed to:

$$
\Omega = diag(\omega) \cdot LL' \cdot diag(\omega) 
$$

where $\rho = LL'$ denotes correlation, $L$ is a lower triangular Cholesky factor for a correlation matrix and $\omega$ denotes standard deviation for between subject variability.

## Priors

The priors were specified based on paramter estimates provided by Potts et al. [1].

$$ 
  \theta_{CL} \sim lognormal(log(14.6),0.06), \\
   \theta_{Q} \sim lognormal(log(157),0.111), \\
    \theta_{V1} \sim lognormal(log(62.5),0.17), \\
  \theta_{V2} \sim lognormal(log(119),0.087), \\
  \beta \sim lognormal(log(0.262),0.274), \\
   Tcl \sim lognormal(log(25.7),0.294), \\
   fr_{CL}, fr_{Q},fr_{V1},fr_{V2} \sim lognormal(log(1),0.25), \\
  \nu \sim gamma(2,0.1),\\
  \omega_{CL}\sim lognormal(log(0.351),0.25), \\
  \omega_{Q} \sim lognormal(log(0.773),0.25), \\
  \omega_{V_1} \sim lognormal(log(0.711),0.25), \\ 
  \omega_{V_2} \sim lognormal(log(0.229),0.25), \\
  allo_{CL},allo_{Q} \sim normal(0.75,0.05), \\
  allo_{V_1}, allo_{V_2} \sim normal(1,0.05), \\
  \sigma_{1}\sim lognormal(log(0.2),0.05), \\
  p(LL') \propto LKJ(4) \cdot \Pi_u N(c_u, 0.125), \\
  c_u = [0.538,-0.036,0.323,-0.110,-0.199,-0.144]
$$

LKJ(4) ensure that the density is uniform over correlation matrices of order 4 and u denotes the unique lower triangular elements of correlation matrix (<http://srmart.in/informative-priors-for-correlation-matrices-an-easy-approach/>)

$fr$ is a form of a commensurate prior [2].

# Format data for Stan

```{r include=TRUE}

xdata <- subset(xdata, outliers == 0)

# Format data for Stan
nt <- nrow(xdata)
iObs <- with(xdata, (1:nrow(xdata))[EVID == 0])
nObs <- length(iObs)

## Subject specific data
xsub <- subset(xdata, !duplicated(ID))
nSubjects <- length(xsub$ID)

## Row indices for start and end of each individual's data
start <- (1:nt)[!duplicated(xdata$ID)]
end <- c(start[-1] - 1, nt)

nIIV <- 4
weight<- xdata$WT
age <- xdata$AGEM
time <- xdata$TIMEh
cObs <- xdata$DV[iObs]
amt <-  xdata$AMT
rate <- xdata$RATE
cmt <- 2+xdata$AGEM*0
evid <- xdata$EVID
ii <- xdata$AGEM*0
addl <- xdata$AGEM*0
ss <- xdata$AGEM*0
runestimation<-1

# create Stan data set
 data_list <- with(xdata,
             list(nt = nt,
                  nObs = nObs,
                  nSubjects = nSubjects,
                  nIIV = 4,
                  iObs = iObs,
                  start = start,
                  end = end,
                  weight= WT,
                  age = AGEM,
                  time = TIMEh,
                  cObs = DV[iObs],
                  amt =  AMT,
                  rate = RATE,
                  cmt = 2+AGEM*0,
                  evid = EVID,
                  ii = AGEM*0,
                  addl = AGEM*0,
                  ss = AGEM*0,
                  runestimation=1))

write_stan_json(data_list, "../StanData/model.data.json", always_decimal = FALSE)
data_list$runestimation<-0
write_stan_json(data_list, "../StanData/prior.model.data.json", always_decimal = FALSE)

## create initial estimates
init <- function(){
  list(CLHat = exp(rnorm(1, log(14.6),0.25)),
       QHat = exp(rnorm(1, log(157),0.5)),
       V1Hat = exp(rnorm(1, log(62.5),0.5)),
       V2Hat = exp(rnorm(1, log(119),0.5)),
       betaHat = exp(rnorm(1, log(0.262),0.25)),
       TclHat = exp(rnorm(1,log(25.7),0.25)),
       allo = c(0.75,0.75,1,1) * exp(rnorm(4,0,0.25)),
       fr = c(1,1,1,1) * exp(rnorm(4,0,0.25)),
       nu = rgamma(1,2,0.1),
       omega = c(0.5,0.5,0.5,0.5) * exp(rnorm(4, 0, 0.25)),
       L = diag(4),
       sigma = exp(rnorm(1,log(0.2),0.25)),
       etaStd = matrix(0L, 4, nSubjects))
}

```

The Stan/Torsten model is as follows:

```{r}

writeLines(readLines("../Model/clonidine.stan"))

```

## Inference

```{r include=TRUE}
model <- cmdstan_model("../Model/clonidine.stan")
```

```{r include=TRUE, eval=FALSE}

 fit <- model$sample(
  data = "../StanData/model.data.json",
  seed = 123,
  chains = 4,
  parallel_chains = 4,
  adapt_delta = 0.9,
  refresh = 500,
  init = init
 )

  fit0 <- model$sample(
  data = "../StanData/prior.model.data.json",
  seed = 123,
  chains = 4,
  parallel_chains = 4,
  refresh = 500,
  init = init
)

# save
 fit$save_object(file = "../StanData/fit.RDS")
 fit0$save_object(file = "../StanData/fit0.RDS")
 
# save stanfit obj for shiny
 stanfit <- rstan::read_stan_csv(fit$output_files())
 saveRDS(stanfit, "../StanData/stanfit.RDS")

```

```{r include=TRUE}
# fit is read back using readRDS - for speed
 fit <- readRDS("../StanData/fit.RDS")
 fit0 <- readRDS("../StanData/fit0.RDS")

```

## lounch shiny

```{r include=TRUE, eval=FALSE}
 library(shinystan)
 stanfit<-readRDS("../StanData/stanfit.RDS")
 launch_shinystan(stanfit)
```

# Results

## Priors

```{r include=TRUE}

bayesplot::mcmc_dens(fit0$draws(c("CLHat","QHat","V1Hat","V2Hat"))) 
bayesplot::mcmc_dens(fit0$draws(c("betaHat","TclHat"))) 
bayesplot::mcmc_dens(fit0$draws(c("fr"))) 
bayesplot::mcmc_dens(fit0$draws(c("sigma","nu")))
bayesplot::mcmc_dens(fit0$draws("omega"))
bayesplot::mcmc_dens(fit0$draws("allo"))
bayesplot::mcmc_dens(fit0$draws(c("rho"))) 

```

## Posteriors

```{r include=TRUE}

bayesplot::mcmc_dens(fit$draws(c("CLHat","QHat","V1Hat","V2Hat"))) 
bayesplot::mcmc_dens(fit$draws(c("betaHat","TclHat"))) 
bayesplot::mcmc_dens(fit$draws(c("fr"))) 
bayesplot::mcmc_dens(fit$draws(c("sigma","nu")))
bayesplot::mcmc_dens(fit$draws("omega"))
bayesplot::mcmc_dens(fit$draws("allo"))
bayesplot::mcmc_dens(fit$draws(c("rho"))) 

```

## Summary

```{r include=TRUE}

fit$print(c("CLHat","QHat","V1Hat","V2Hat", "betaHat","TclHat", "fr", "sigma", "nu", "omega", "allo", "rho"), max_rows = 30)

```

## Individual and population predictions

```{r include=TRUE}

yrepCond1 <- as_draws_df(fit$draws(variables = c("cObsCond"))) %>%
  select(starts_with("cObsCond")) %>% as.matrix()

yrepPred1 <- as_draws_df(fit$draws(variables = c("cObsPred"))) %>%
  select(starts_with("cObsPred")) %>% as.matrix()

t <- xdata$TIME[iObs]  #(read from data)
id <- xdata$ID[iObs]   #(read from data)
idx <- unique(id)

for (z in seq_along(idx)) {
  
  yobs <- xdata$DV[iObs] 
  ktore <- (id == idx[z])
  
  p1 <- bayesplot::ppc_ribbon(y = yobs[ktore], yrep = yrepCond1[, ktore], x = t[ktore]) +
        ggplot2::xlab("Time (h)") + ggplot2::ylab("Clonidine (ng/ml)") +
        geom_point(data = data.frame(x = t[ktore], y = yobs[ktore]), mapping = aes(x, y), inherit.aes = FALSE) +
        ggtitle(sprintf("Indiv. pred. for ID=%d", idx[z])) +
        theme(legend.position = "none") +
        expand_limits(y=0)
  
  p2 <- bayesplot::ppc_ribbon(y = yobs[ktore], yrep = yrepPred1[, ktore], x = t[ktore]) +
        ggplot2::xlab("Time (h)")+
        geom_point(data = data.frame(x = t[ktore], y = yobs[ktore]), mapping = aes(x, y), inherit.aes = FALSE) +
        ggtitle(sprintf("Pop. pred. for ID=%d", idx[z]))+
        expand_limits(y=0)
  
  plot12 <- grid.arrange(grobs = list(p1, p2), ncol = 2, nrow = 1)
  
  # ggsave(paste0("Figures/IndPK_", idx[z]), plot=plot12,  width = 15, height = 20, units = "cm", dpi=300)
}
 
```

## Individual parameters vs. covariates

```{r include=TRUE}

thetaM<-data.frame(log(matrix(fit$summary("thetaM")$mean, nrow = length(start))))
q5thetaM<-data.frame(log(matrix(fit$summary("thetaM")$q5, nrow = length(start))))
q95thetaM<-data.frame(log(matrix(fit$summary("thetaM")$q95, nrow = length(start))))

names(thetaM)[names(thetaM) == 'X1'] <- 'logCL'
names(thetaM)[names(thetaM) == 'X2'] <- 'logQ'
names(thetaM)[names(thetaM) == 'X3'] <- 'logV1'
names(thetaM)[names(thetaM) == 'X4'] <- 'logV2'

names(q5thetaM)[names(q5thetaM) == 'X1'] <- 'logCL5'
names(q5thetaM)[names(q5thetaM) == 'X2'] <- 'logQ5'
names(q5thetaM)[names(q5thetaM) == 'X3'] <- 'logV15'
names(q5thetaM)[names(q5thetaM) == 'X4'] <- 'logV25'

names(q95thetaM)[names(q95thetaM) == 'X1'] <- 'logCL95'
names(q95thetaM)[names(q95thetaM) == 'X2'] <- 'logQ95'
names(q95thetaM)[names(q95thetaM) == 'X3'] <- 'logV195'
names(q95thetaM)[names(q95thetaM) == 'X4'] <- 'logV295'

thetaM <- cbind(thetaM,q5thetaM,q95thetaM)

thetaM$age<-xdata$AGE[start]
thetaM$bw<-xdata$WT[start]

cov = c("age","bw")

for (z in seq_along(cov)) {

p1<-ggplot(thetaM, aes_string(x=cov[z], y="logCL")) + 
  geom_point()+
  geom_smooth() +
  geom_errorbar(aes(ymin=logCL5, ymax=logCL95), width=.2, position=position_dodge(0.05))
  
p2<-ggplot(thetaM, aes_string(x=cov[z], y="logQ")) + geom_point()+
  geom_smooth()+
  geom_errorbar(aes(ymin=logQ5, ymax=logQ95), width=.2, position=position_dodge(0.05))

p3<-ggplot(thetaM, aes_string(x=cov[z], y="logV1")) + geom_point()+
  geom_smooth()+
  geom_errorbar(aes(ymin=logV15, ymax=logV195), width=.2, position=position_dodge(0.05))

p4<-ggplot(thetaM, aes_string(x=cov[z],y="logV2")) + geom_point()+
  geom_smooth()+
  geom_errorbar(aes(ymin=logV25, ymax=logV295), width=.2,position=position_dodge(0.05))

plot1234 <- grid.arrange(grobs = list(p1, p2, p3, p4), nraw=4)

# ggsave(paste0("Figures/COV_", cov[z]), plot=plot1234,  width = 15, height = 20, units = "cm", dpi=300)

}



```

## GOF

```{r include=TRUE}

 yobs <- xdata$DV[iObs]

 p1 <- bayesplot::ppc_intervals(y = yobs, yrep = yrepCond1[,], x = yobs) + 
   ggplot2::xlab("Observed (ng/ml)") + ggplot2::ylab("Individual Predicted (ng/ml)") +
   scale_y_log10(limits = c(0.1, 100)) + 
   scale_x_log10(limits = c(0.1, 100)) +
   theme(legend.position = "none") +
   geom_abline(intercept = 0, slope = 1)
 p2 <- bayesplot::ppc_intervals(y = yobs, yrep = yrepPred1[,], x = yobs) +
   ggplot2::xlab("Observed (ng/ml)") + ggplot2::ylab("Population Predicted (ng/ml)") +
   scale_y_log10(limits = c(0.1, 100)) +
   scale_x_log10(limits = c(0.1, 100)) +
   geom_abline(intercept = 0, slope = 1)
 

 plot12 <- grid.arrange(grobs = list(p1, p2), ncol=2, nraw=1)
 
# ggsave("Figures/GOF", plot=plot12,  width = 15, height = 20, units = "cm", dpi=300)
  

```

# References

1.  Potts AL, Larsson P, Eksborg S, Warman G, Lönnqvist PA, Anderson BJ. Clonidine disposition in children; a population analysis. Paediatr Anaesth. 2007 Oct;17(10):924-33. doi: 10.1111/j.1460-9592.2007.02251.x. PMID: 17767627.

2.Hobbs BP, Sargent DJ, Carlin BP. Commensurate Priors for Incorporating Historical Information in Clinical Trials Using General and Generalized Linear Models. Bayesian Anal. 2012 Aug 28;7(3):639-674. doi: 10.1214/12-BA722. PMID: 24795786; PMCID: PMC4007051.

# Licenses {.unnumbered}

-   Code & copy; 2023, Paweł Wiczling, licensed under BSD-3.
-   Text & copy; 2023, Paweł Wiczling, licensed under CC-BY-NC 4.0.

# Original Computing Environment {.unnumbered}

```{r}
sessionInfo()
```

<br />
